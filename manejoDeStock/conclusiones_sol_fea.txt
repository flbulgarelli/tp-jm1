
Esta solucion es simple, ya que tenemos tres clases(Fabrica,Stock,Producto) y la clase Stock es la que tiene el comportamiento principal
para resolver el problema planteado.
Lo resuelve de manera simple, tenemos una coleccion de productos donde puede haber finales, componentes y materias primas, estos los diferenciamos
segun los valores que tomen los atributos. Llegamos a resolver el problema solo trabajando con estos atributos y operando la coleccion, filtrandola, pidiendole el tamaño.
Si queremos saber cuales son los componentes de auto, solamente hay que filtrar la coleccion para aquellos componentes que en el atributo "esComponentede" sea igual a "auto".

segun extensibilidad podemos discutir varios puntos:

1) la extensibilidad de los notificadores, si la cantidad en stock de un producto es menor a la cantidad minima para saber a quien
debe notificar cuenta con un codigoNotificacion. Si este es 0 entonces no notifica a nadie, si es uno notifica a compras y si es 
2 notifica por email, cumpliendo de alguna forma una especie de protocolo.
Si nosotros queremos agregar otra forma de notificar, cumpliendose la condicion , lo unico que debemos hacer es agregar un nuevo
codigoNotificacion a nuestro protocolo y agregar un "if codigoNotificacion=unNro entonces notificarAotro", de manera muy simple
2) la extensibilidad de los notificadores cuando ingresa materia prima, segun la condicion que se cumpla se sabe a quien notificar, por ahora es simple.
Ya que solo depende de agregar a nueva condicion o utilizar alguna de las que ya estan y se notifica. 
3) la extensibilidad de los productos, en cuanto a la coleccion no hay problema por que es agregarlo y que tenga un atributo que lo diferencie, para despues
el filtrado de la coleccion.

Sobre la mantenibilidad
1) En cuanto agregar un nuevo codigoNotificacion, hay que tener cuidado por que los codigos no se pueden pisar, son unicos y tienen que tener el protocolo bien claro
2)esto es todavia menos mantenible, por que dependo mucho de la condicion para notificar que deba hacer. Apesar de ser simple, me trae mas trabajo mantener esto en el tiempo.
3)las complicaciones para los productos es en el caso que se deban agregar mas atributos, ya que esa es nuestra forma de discriminarlos. Se complicaria para mantenerlo.

Segun acoplamiento y cohesion

Casi todo el comportamiento se centra en la clase Stock y esta tiene toda la responsabilidad de llevar a cabo los requerimientos planteados. Debe saber a quien descontar, que validar, las notificaciones, etc.
La clase Producto, tiene los valores que voy a necesitar para operar en la clase Stock y un metodo que en definitiva tambien depende de stock.
La clase Fabrica, lo unico que hace es "decirle" al stock que se debe reservar el producto. 

En cuanto a testeabilidad
Primero que se tendria que tener muy en claro para producto que valores deberian tener los atributos para que se diferencie uno de otro perfectamente. Luego de esto, nos dispondriamos a hacer muchos test por que:
1) si queremos reservar un auto, tenemos que hacer un test para uno que este en la coleccion de productos y para otro que no este y haya que fabricarlo  y esten todas sus componentes.
2) si queremos reservar un auto y no esta en el stock, mandarlo a fabricar pero sus componentes tampoco estan en el stock. De esto se desprende que las componentes de sus componentes o son materias primas o hay que mandar a fabricarlas.
No solo hay que tenerlo muy en claro si no que hay muchos aspectos que testear y no puedo generalizarlo.




 
